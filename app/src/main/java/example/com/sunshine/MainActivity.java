package example.com.sunshine;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.LoaderManager.LoaderCallbacks;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.Toast;

import example.com.sunshine.adapter.MainActivityAdapter;
import example.com.sunshine.adapter.MainActivityAdapter.MainActivityAdapterOnClickHandler;
import example.com.sunshine.data.SunshinePreferences;
import example.com.sunshine.data.contract.WeatherContract;
import example.com.sunshine.util.SunshineSyncUtils;

public class MainActivity extends AppCompatActivity implements MainActivityAdapterOnClickHandler, LoaderCallbacks<Cursor> {

    public static final String[] MAIN_FORECAST_PROJECTION = {
        WeatherContract.WeatherEntry.COLUMN_DATE,
        WeatherContract.WeatherEntry.COLUMN_MAX_TEMP,
        WeatherContract.WeatherEntry.COLUMN_MIN_TEMP,
        WeatherContract.WeatherEntry.COLUMN_WEATHER_ID,
    };
    public static final int INDEX_WEATHER_DATE = 0;
    public static final int INDEX_HIGH = 1;
    public static final int INDEX_LOW = 2;
    public static final int INDEX_WEATHER_ID = 3;

    private static final int ID_FORECAST_LOADER = 0;
    private static boolean PREFERENCES_UPDATED = false;
    private int mPos = RecyclerView.NO_POSITION;
    private ProgressBar mPbProgressBar;
    private RecyclerView mRvMainActivity;
    private MainActivityAdapter mMainActivityAdapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        getSupportActionBar().setElevation(0f);

        mPbProgressBar = findViewById(R.id.pbProgressBar);
        mRvMainActivity = findViewById(R.id.rvMainActivity);
        mMainActivityAdapter = new MainActivityAdapter(this,this);

        setupLayoutManager();
        showLoading();

        getSupportLoaderManager().initLoader(ID_FORECAST_LOADER, null, this);
        SunshineSyncUtils.initialize(this);
    }

    @Override
    protected void onStart() {
        super.onStart();
        if (PREFERENCES_UPDATED) {
            getSupportLoaderManager().restartLoader(ID_FORECAST_LOADER, null, this);
            PREFERENCES_UPDATED = false;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_activity_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        switch (id) {
            case R.id.menuMap:
                openMapLocation();
                return true;
            case R.id.menuSettings:
                Intent settingsIntent = new Intent(this, SettingsActivity.class);
                startActivity(settingsIntent);
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @SuppressLint("StaticFieldLeak")
    @Override
    public Loader<Cursor> onCreateLoader(int id, final Bundle args) {
        switch (id) {
            case ID_FORECAST_LOADER:
                return new CursorLoader(
                    this,
                    WeatherContract.WeatherEntry.CONTENT_URI,
                    MAIN_FORECAST_PROJECTION,
                    WeatherContract.WeatherEntry.getSqlSelectForTodayOnwards(),
                    null,
                    WeatherContract.WeatherEntry.COLUMN_DATE + " ASC"
                );
            default:
                throw new RuntimeException("Loader not implemented: " + id);
        }
    }

    /**
     * Called when a previously created loader has finished its load.
     *
     * @param loader The Loader that has finished.
     * @param data The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
        mMainActivityAdapter.swapCursor(data);

        if (mPos == RecyclerView.NO_POSITION) {
            mPos = 0;
        }

        mRvMainActivity.smoothScrollToPosition(mPos);

        if (data.getCount() != 0) {
            mPbProgressBar.setVisibility(View.INVISIBLE);
            mRvMainActivity.setVisibility(View.VISIBLE);
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable. The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<Cursor> loader) {
        mMainActivityAdapter.swapCursor(null);
    }

    /**
     * This method is overridden by our MainActivity class in order to handle RecyclerView item
     * clicks from {@link MainActivityAdapter.MainActivityAdapterOnClickHandler}.
     *
     * @param date data to display
     */
    @Override
    public void onClickHandler(long date) {
        Intent weatherDetailIntent = new Intent(this, WeatherDetailActivity.class);
        Uri uriForDate = WeatherContract.WeatherEntry.buildWeatherUriWithDate(date);
        weatherDetailIntent.setData(uriForDate);

        startActivity(weatherDetailIntent);
    }

    private void showLoading() {
        mRvMainActivity.setVisibility(View.INVISIBLE);
        mPbProgressBar.setVisibility(View.VISIBLE);
    }

    /**
     * Sets up the LayoutManager
     */
    private void setupLayoutManager() {
        mRvMainActivity.setLayoutManager(new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false));
        mRvMainActivity.setHasFixedSize(true);
        mRvMainActivity.setAdapter(mMainActivityAdapter);
    }

    /**
     * Implicit intent that opens any apps that supports geo location, such as Google Maps
     */
    private void openMapLocation() {
        double[] coords = SunshinePreferences.getLocationCoordinates(this);
        String lat = Double.toString(coords[0]);
        String lon = Double.toString(coords[1]);
        Uri geo = Uri.parse("geo:" + lat + "," + lon);

        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setData(geo);

        if (intent.resolveActivity(getPackageManager()) != null) {
            startActivity(intent);
        } else {
            Toast.makeText(this, "Could not call " + geo.toString() + ", no receiving apps installed", Toast.LENGTH_SHORT).show();
        }
    }
}
